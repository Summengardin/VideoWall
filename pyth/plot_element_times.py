import pandas as pd
import matplotlib.pyplot as plt
import argparse

parser = argparse.ArgumentParser(description='Plot time series data for each element in a CSV file. The CSV file is generated by the trace_stats.py script.')
parser.add_argument('csv_file_path', nargs='?' , type=str, default='./output/element_times_cleaned.csv', help='Path to the input CSV file')
args = parser.parse_args()


def remove_outliers(df, column):
    series = df[column]
    Q1 = series.quantile(0.25)
    Q3 = series.quantile(0.75)
    IQR = Q3 - Q1
    lower_bound = Q1 - 1.5 * IQR
    upper_bound = Q3 + 1.5 * IQR
    return df[(series >= lower_bound) & (series <= upper_bound)]


def calculate_fps(df, column=None):
    if column:
        df = df.dropna(subset=[column]).copy()

    df['timestamp_diff'] = df['ts'].diff() 
    df['fps'] = 1 / (df['timestamp_diff'] / 1e9)    

    return df


def plot_element_data(df):

    elements = df.columns[2:]

    num_elements = len(elements)
    num_cols = 3 
    num_rows = (num_elements + num_cols - 1) // num_cols 


    fig, axes = plt.subplots(num_rows, num_cols, figsize=(15, num_rows * 5))
    axes = axes.flatten() 

    for i, element in enumerate(elements):
        filtered_df = remove_outliers(df, element)
        axes[i].plot(filtered_df['Frame'], filtered_df[element], marker='o', linestyle='-')
        axes[i].set_title(f'Time Series Data for {element}')
        axes[i].set_xlabel('Frame')
        axes[i].set_ylabel('Time (ms)')
        axes[i].grid(True)

    # Hide any unused subplots
    for j in range(i + 1, len(axes)):
        fig.delaxes(axes[j])

    plt.tight_layout()
    plt.show()


def plot_fps(df):
    filtered_df = remove_outliers(df, 'fps')
    plt.figure(figsize=(15, 5))
    plt.plot(filtered_df['Frame'], filtered_df['fps'], marker='o', linestyle='-')
    plt.title('Estimated FPS Over Time')
    plt.xlabel('Frame')
    plt.ylabel('FPS')
    plt.grid(True)
    plt.tight_layout()
    plt.show()


csv_file_path = args.csv_file_path

df = pd.read_csv(csv_file_path)

# df = calculate_fps(df, 'pay0')
# plot_fps(df)
plot_element_data(df)